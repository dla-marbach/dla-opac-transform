# Werktitel werden ausgelassen.
- op: core/column-addition
  engineConfig:
    facets:
      - type: list
        expression: value
        columnName: category
        invert: true
        selection:
          - v:
              v: Werktitel
    mode: row-based
  baseColumnName: id
  expression: |
    grel:
    '<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd">' + '\n' +

    forEach(
      [
        forNonBlank(cells['display'].value, v, v, ''),
        forNonBlank(cells['titleOther_type_mv'].value, x,
          forEachIndex(x.split('␟'), i, z,
            if(
              z == '303n',
              forNonBlank(cells['titleOther_text_mv'].value.split('␟')[i], v,
                forNonBlank(cells['work_display_mv'].value.split('␟')[0].replace('␣', ''), w, w, v)
              , '')
            , '')
          ).join('␟')
        , ''),
        forNonBlank(cells['titleOther_type_mv'].value, x,
          forEachIndex(x.split('␟'), i, z,
            if(
              or(z == '340n', z == '370n'),
              forNonBlank(cells['titleOther_text_mv'].value.split('␟')[i], v, v, '')
            , '')
          ).join('␟')
        , ''),
        forNonBlank(cells['parentTitleOriginal_mv'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:title>' + v.escape('xml') + '</dc:title>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['personBy_display_mv'].value, v, v, ''),
        forNonBlank(cells['corporationBy_display_mv'].value, v, v, ''),
        forNonBlank(cells['corporationByConference_display_mv'].value, v, v, ''),
        forNonBlank(cells['item_id_mv'].value, items,
          forEach(items.split('␟'), item,
              forNonBlank(item.cross('au','id')[0].cells['personAt_display_mv'].value, v, v, '')
          ).join('␟')
        , ''),
        forNonBlank(cells['item_id_mv'].value, items,
          forEach(items.split('␟'), item,
              forNonBlank(item.cross('au','id')[0].cells['corporationAt_display_mv'].value, v, v, '')
          ).join('␟')
        , '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:creator>' + v.escape('xml') + '</dc:creator>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['filterMedium_mv'].value, v, v, ''),
        forNonBlank(cells['filterFormContent_mv'].value, v, v, ''),
        forNonBlank(cells['categoryMedium_mv'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:type>' + v.escape('xml') + '</dc:type>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['publisherOriginal_text_mv'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:publisher>' + v.escape('xml') + '</dc:publisher>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['dateOrigin'].value, v, v, ''),
        forNonBlank(cells['dateOriginComment_mv'].value, v, v, ''),
        forNonBlank(cells['scholarlyPublication_date_mv'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:date>' + v.escape('xml') + '</dc:date>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['filterLanguageType_mv'].value, x,
          forEach(x.split('␟'), v, if(
              v.split('␝')[1] == 'Original',
              v.split('␝')[0]
            , '')
          ).join('␟')
        , '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:language>' + v.escape('xml') + '</dc:language>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['extentFormat'].value, v, v, ''),
        forNonBlank(cells['extent'].value, v, v, ''),
        forNonBlank(cells['description_text_mv'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:format>' + v.escape('xml') + '</dc:format>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['noteFootnote_text_mv'].value, v, v, ''),
        forNonBlank(cells['noteContent_mv'].value, v, v, ''),
        forNonBlank(cells['publicationHistory'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:description>' + v.escape('xml') + '</dc:description>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['filterSubject_mv'].value, v, v, ''),
        forNonBlank(cells['personAbout_display_mv'].value, v, v, ''),
        forNonBlank(cells['corporationAbout_display_mv'].value, v, v, ''),
        forNonBlank(cells['classification_display_mv'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:subject>' + v.escape('xml') + '</dc:subject>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['filterLocationType_mv'].value, x,
          forEach(x.split('␟'), v,
            if(
              v.split('␝')[1] == 'Schlagwort',
              v.split('␝')[0]
            , '')
          ).join('␟')
        , '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:coverage>' + v.escape('xml') + '</dc:coverage>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['parent_id_mv'].value, x,
            forEach(x.split('␟'), v, if(v != '␣',
              'https://www.dla-marbach.de/find/opac/id/' + v
            , '')).join('␟')
        , ''),
        forNonBlank(cells['item_id_mv'].value, items,
          forEach(items.split('␟'), item,
            forNonBlank(item.cross('au','id')[0].cells['collection_id_mv'].value, x,
              forEach(x.split('␟'), v, if(v != '␣',
                'https://www.dla-marbach.de/find/opac/id/' + v
              , '')).join('␟')
            , '')
          ).join('')
        , '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:source>' + v.escape('xml') + '</dc:source>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['relation_id_mv'].value, x,
            forEach(x.split('␟'), v, if(v != '␣',
              'https://www.dla-marbach.de/find/opac/id/' + v
            , '')).join('␟')
        , '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:relation>' + v.escape('xml') + '</dc:relation>' + '\n'
    ).join('') +

    forEach(
      [
        forNonBlank(cells['identifier_type_mv'].value, x,
          forEachIndex(x.split('␟'), i, z,
            if(
              or(z == '552b', z == '572z'),
              forNonBlank(cells['identifier_id_mv'].value.split('␟')[i], v, v, '')
            , '')
          ).join('␟')
        , ''),
        forNonBlank(cells['isbn_mv'].value, v, v, ''),
        forNonBlank(cells['ismn_mv'].value, v, v, ''),
        forNonBlank(cells['issn_mv'].value, v, v, ''),
        forNonBlank(cells['vendor_type_mv'].value, x,
          forEachIndex(x.split('␟'), i, z,
            if(
              z == 'K10Plus-PPN',
              forNonBlank(cells['vendor_id_mv'].value.split('␟')[i], v, v, '')
            , '')
          ).join('␟')
        , ''),
        forNonBlank(cells['callNumberBibliographic_mv'].value, v, v, ''),
        forNonBlank(cells['item_id_mv'].value, items,
          forEach(items.split('␟'), item,
            forNonBlank(item.cross('au','id')[0].cells['callNumberItem'].value, v,
              v + forNonBlank(item.cross('au','id')[0].cells['callNumberItemSuffix'].value, x, ' (' + x + ')', '')
            , '')
          ).join('␟')
        , ''),
        forNonBlank(cells['website_url_mv'].value, v, v, ''),
        forNonBlank(cells['digitalObject_hyperlink_mv'].value, v, v, ''),
        forNonBlank(cells['id'].value, v, 'https://www.dla-marbach.de/find/opac/id/' +  v, ''),
        forNonBlank(cells['id'].value, v, v, '')
      ].join('␟').replace('␣','').split('␟').uniques(),
      v,
      '  <dc:identifier>' + v.escape('xml') + '</dc:identifier>' + '\n'
    ).join('') +

    '</oai_dc:dc>'
  newColumnName: exportDC
  columnInsertIndex: 2

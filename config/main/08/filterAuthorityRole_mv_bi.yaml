# Facette Personen und Körperschaften
# personBy: Wenn _role_mv = "Sonstige/r Urheber/in" und _comment_mv = "Widmung" dann "Widmungsschreiber" ; sonst _role_mv oder "nicht bestimmt"
# corporationBy: "Verfasser/Urheber"
# personTo, corporationTo: "Widmungsempfänger"
# personAbout, corporationAbout: _role_mv oder "nicht bestimmt"
# personAt, corporationAt: "Bestandsbildner/Vorbesitzer"
- op: core/column-addition
  engineConfig:
    facets: []
    mode: row-based
  baseColumnName: id
  expression: |
    grel:
    forNonBlank(
      [
        forNonBlank(
          cells['personBy_display_mv'].value,
          v,
          with(
            cells['personBy_role_mv'].value.split('␟'),
            x,
            forEachIndex(
              v.split('␟'),
              i,
              y,
              y + if(
                isNonBlank(x[i].replace('␣','')),
                if(
                  and(
                    x[i] == 'Sonstige/r Urheber/in',
                    forNonBlank(
                      cells['personBy_comment_mv'].value,
                      c,
                      c.split('␟')[i] == 'Widmung',
                      false
                    )
                  ),
                  '␝' + 'Widmungsschreiber',
                  '␝' + x[i]
                ),
                '␝' + 'nicht bestimmt'
              )
            ).join('␟')
          ),
          null
        ),
        forNonBlank(
          cells['corporationBy_display_mv'].value,
          v,
          forEach(
            v.split('␟'),
            x,
            x + '␝' + 'Verfasser/Urheber'
          ).join('␟'),
          null
        ),
        forNonBlank(
          cells['personTo_display_mv'].value,
          v,
          forEach(
            v.split('␟'),
            x,
            x + '␝' + 'Widmungsempfänger'
          ).join('␟'),
          null
        ),
        forNonBlank(
          cells['corporationTo_display_mv'].value,
          v,
          forEach(
            v.split('␟'),
            x,
            x + '␝' + 'Widmungsempfänger'
          ).join('␟'),
          null
        ),
        forNonBlank(
          cells['personAbout_display_mv'].value,
          v,
          with(
            cells['personAbout_role_mv'].value.split('␟'),
            x,
            forEachIndex(
              v.split('␟'),
              i,
              y,
              y + if(
                isNonBlank(x[i].replace('␣','')),
                '␝' + x[i],
                '␝' + 'nicht bestimmt'
              )
            ).join('␟')
          ),
          null
        ),
        forNonBlank(
          cells['corporationAbout_display_mv'].value,
          v,
          with(
            cells['corporationAbout_role_mv'].value.split('␟'),
            x,
            forEachIndex(
              v.split('␟'),
              i,
              y,
              y + if(
                isNonBlank(x[i].replace('␣','')),
                '␝' + x[i],
                '␝' + 'nicht bestimmt'
              )
            ).join('␟')
          ),
          null
        ),
        forNonBlank(
          cells['personAt_display_mv'].value,
          v,
          forEach(
            v.split('␟'),
            x,
            x + '␝' + 'Bestandsbildner/Vorbesitzer'
          ).join('␟'),
          null
        ),
        forNonBlank(
          cells['corporationAt_display_mv'].value,
          v,
          forEach(
            v.split('␟'),
            x,
            x + '␝' + 'Bestandsbildner/Vorbesitzer'
          ).join('␟'),
          null
        )
      ].join('␟'),
      z,
      filter(
        z.split('␟'),
        f,
        f[0] != '␣'
      ).uniques().join('␟'),
      null
    )
  newColumnName: filterAuthorityRole_mv
  columnInsertIndex: 2
# Suchen/Ersetzen aus Mappings-Datei
- op: core/text-transform
  engineConfig:
    facets: []
    mode: row-based
  columnName: filterAuthorityRole_mv
  expression: |
    grel:
    forEach(
      value.split('␟'),
      v,
      with(
        v.split('␝'),
        x,
        forNonBlank(
          x[1].cross('map_filterAuthorityRole','suchen')[0],
          z,
          x[0] + '␝' + z.cells['ersetzen'].value,
          x[0] + '␝' + x[1]
        )
      )
    ).uniques().join('␟')

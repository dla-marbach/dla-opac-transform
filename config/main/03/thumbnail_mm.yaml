# inline-<img>-fähige Thumbnail-URL aus der URL bilden
# Cantaloupe /iiif/
- op: core/column-addition
  engineConfig:
    facets:
    - type: text
      columnName: hyperlink
      # in YAML Doppel-Escaping \\ erforderlich für RegEx-Steuerzeichen
      query: "^https:\\/\\/digital.dla-marbach.de\\/iiif\\/"
      mode: regex
    mode: row-based
  baseColumnName: hyperlink
  # Breite 128 Pixel, Höhe 192 Pixel
  # Kodierte Slashes (%2f oder %2F) werden zunächst aufgelöst
  expression: |
    grel:
    cells['hyperlink'].value.replace('%2f','/').replace('%2F','/').replace('full/full/','full/!128,192/')
  newColumnName: thumbnail
  columnInsertIndex: 2
# Goobi mit Goobi-Interface /viewer/image/
- op: core/text-transform
  engineConfig:
    facets:
    - type: text
      columnName: hyperlink
      query: "^https:\\/\\/digital.dla-marbach.de\\/viewer\\/image\\/"
      mode: regex
    mode: row-based
  columnName: thumbnail
  # ObjId = rechts neben "/image/" und vor dem nächsten "/"
  # ObjFile = URL-Parameter media_thumbnail, Default: ObjId + '_0001.tif'
  # Pfad bilden mit "https://digital.dla-marbach.de/viewer/api/v1/records/" + ObjId + "/files/images/" + ObjFile + "/full/!128,192/0/default.jpg"
  expression: |
    grel:
    with(
      cells['hyperlink'].value.partition('/image/')[2].split('/')[0],
      ObjId,
      with(
        forNonBlank(
          cells['hyperlink'].value.find(/[?&]media_thumbnail=[^?&]+/)[0].split('=')[1],
          x,
          x,
          ObjId + '_0001.tif'
        ),
        ObjFile,
        forNonBlank(
          "https://digital.dla-marbach.de/viewer/api/v1/records/" + ObjId + "/files/images/" + ObjFile + "/full/!128,192/0/default.jpg",
          x,
          x,
          null
        )
      )
    )
# Goobi IIIF für Inline-Anzeige /viewer/api/
- op: core/text-transform
  engineConfig:
    facets:
    - type: text
      columnName: hyperlink
      query: "^https:\\/\\/digital.dla-marbach.de\\/viewer\\/api\\/"
      mode: regex
    mode: row-based
  columnName: thumbnail
  # ObjId = rechts neben "/records/" und vor dem nächsten "/"
  # ObjFile = rechts neben "/images/" und vor dem nächsten "/", Default: ObjId + '_0001.tif'
  # Pfad bilden mit "https://digital.dla-marbach.de/viewer/api/v1/records/" + ObjId + "/files/images/" + ObjFile + "/full/!128,192/0/default.jpg"
  expression: |
    grel:
    with(
      cells['hyperlink'].value.partition('/records/')[2].split('/')[0],
      ObjId,
      with(
        forNonBlank(
          cells['hyperlink'].value.partition('/images/')[2].split('/')[0],
          x,
          x,
          ObjId + '_0001.tif'
        ),
        ObjFile,
        forNonBlank(
          "https://digital.dla-marbach.de/viewer/api/v1/records/" + ObjId + "/files/images/" + ObjFile + "/full/!128,192/0/default.jpg",
          x,
          x,
          null
        )
      )
    )
# Goobi mit Mirador-Interface /viewer/mirador/
- op: core/text-transform
  engineConfig:
    facets:
    - type: text
      columnName: hyperlink
      query: "^https:\\/\\/digital.dla-marbach.de\\/viewer\\/mirador\\/"
      mode: regex
    mode: row-based
  columnName: thumbnail
  # ObjId = URL-Parameter pi
  # ObjFile = URL-Parameter media_thumbnail, Default: ObjId + '_0001.tif'
  # Pfad bilden mit "https://digital.dla-marbach.de/viewer/api/v1/records/" + ObjId + "/files/images/" + ObjFile + "/full/!128,192/0/default.jpg"
  expression: |
    grel:
    with(
      cells['hyperlink'].value.find(/[?&]pi=[^?&]+/)[0].split('=')[1],
      ObjId,
      with(
        forNonBlank(
          cells['hyperlink'].value.find(/[?&]media_thumbnail=[^?&]+/)[0].split('=')[1],
          x,
          x,
          ObjId + '_0001.tif'
        ),
        ObjFile,
        forNonBlank(
          "https://digital.dla-marbach.de/viewer/api/v1/records/" + ObjId + "/files/images/" + ObjFile + "/full/!128,192/0/default.jpg",
          x,
          x,
          null
        )
      )
    )
# Apache /files/
- op: core/text-transform
  engineConfig:
    facets:
    - type: text
      columnName: hyperlink
      query: "^https:\\/\\/digital.dla-marbach.de\\/files\\/"
      mode: regex
    mode: row-based
  columnName: thumbnail
  # Link kürzen bis zum letzten / und Dateiname aus URL-Parameter media_thumbnail anhängen
  # Falls media_thumbnail fehlt, dann Pfad zu Icon bilden mit Angabe aus fileExtension
  expression: |
    grel:
    forNonBlank(
      cells['hyperlink'].value.find(/[?&]media_thumbnail=[^?&]+/)[0].split('=')[1],
      x,
      cells['hyperlink'].value.rpartition('/')[0] + '/' + x,
      null
    )
# Wenn fileExtension bekannt und Thumbnail unbekannt, dann Link zu Icon bilden
- op: core/text-transform
  engineConfig:
    facets:
    - type: list
      expression: isBlank(value)
      columnName: fileExtension
      selection:
      - v:
          v: false
    - type: list
      expression: isBlank(value)
      columnName: thumbnail
      selection:
      - v:
          v: true
    mode: row-based
  columnName: thumbnail
  expression: |
    grel:
    "https://digital.dla-marbach.de/lib/icons/extension-" + cells['fileExtension'].value + ".png",

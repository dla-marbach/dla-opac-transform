# https://taskfile.dev

version: '3'

vars:
  DIR: '{{default "example" .DIR}}'
  MEMORY: '{{default "2G" .MEMORY}}'
  PORT: '{{default "3333" .PORT}}'

tasks:
  default:
    cmds:
      - task: main
    
  main:
    desc: Internformat aufbereiten für Online-Katalog
    cmds:
      - |
        # Zeitstempel zu Beginn
        mkdir -p .task/timer; date -u +%s.%N > ".task/timer/{{.TASK}}"
      - |
        # Arbeitsverzeichnis leeren
        rm -r "{{.DIR}}/tmp" 2> /dev/null || true; mkdir -p "{{.DIR}}/tmp"
      - |
        # Konfigurationsdateien ins Arbeitsverzeichnis kopieren
        cp -r "config" "{{.DIR}}/tmp/"
      - |
        # orcli das script main.sh ausführen lassen
        DIR={{.DIR}} openrefine/orcli run "scripts/main.sh" --memory "{{.MEMORY}}" --port "{{.PORT}}"
      - |
        # Kopie der Konfigurationsdateien im Arbeitsverzeichnis löschen
        rm -r "{{.DIR}}/tmp/config" 2> /dev/null || true
      - |
        # Vorheriges Ergebnis überschreiben
        rm -r "{{.DIR}}/output" 2> /dev/null || true; mv "{{.DIR}}/tmp" "{{.DIR}}/output"
      - |
        # Laufzeit berechnen
        >&2 echo "{{.TASK}} run time: $(awk -v now=$(date -u +%s.%N) -v timer=$(cat .task/timer/{{.TASK}}) 'BEGIN {print now-timer}') seconds"
    sources:
      - '{{.DIR}}/input/**'
      - scripts/main.sh
      - 'config/*.*'
      - 'config/main/**/**'
    generates:
      - '{{.DIR}}/output/**'
    preconditions:
      - sh: test -f openrefine/orcli
        msg: "orcli not found; try task install"
      - sh: test -f openrefine/refine
        msg: "OpenRefine not found; try task install"
      - command -v jq
      - command -v curl
      - command -v java
      - test -d {{.DIR}}

  dev:
    desc: Entwicklungsmodus (interaktiv)
    cmds:
      - |
        # Arbeitsverzeichnis leeren
        rm -r "{{.DIR}}/tmp" 2> /dev/null || true; mkdir -p "{{.DIR}}/tmp"
      - |
        # Konfigurationsdateien ins Arbeitsverzeichnis kopieren
        cp -r "config" "{{.DIR}}/tmp/"
      - |
        # orcli das script main.sh im interaktiven Modus ausführen lassen
        DIR={{.DIR}} openrefine/orcli run "scripts/main.sh" --memory "{{.MEMORY}}" --port "{{.PORT}}" --interactive
      - |
        # Arbeitsverzeichnis löschen
        rm -r "{{.DIR}}/tmp" 2> /dev/null || true
    preconditions:
      - sh: test -f openrefine/orcli
        msg: "orcli not found; try task install"
      - sh: test -f openrefine/refine
        msg: "OpenRefine not found; try task install"
      - command -v jq
      - command -v curl
      - command -v java
      - test -d {{.DIR}}

  solr:
    desc: Indexierung in Solr testen
    env:
      SOLR_JETTY_HOST: 0.0.0.0
    cmds:
      - solr/bin/solr delete -c dla-indexing &> /dev/null || true
      - solr/bin/solr delete -c dla-prod &> /dev/null || true
      - solr/bin/solr stop &> /dev/null || true
      - rm -r "solr/server/solr/dla-indexing" 2> /dev/null || true; mkdir -p "solr/server/solr/dla-indexing"
      - rm -r "solr/server/solr/dla-prod" 2> /dev/null || true; mkdir -p "solr/server/solr/dla-prod"
      - cp config/solr/* solr/server/solr/dla-indexing/
      - cp config/solr/* solr/server/solr/dla-prod/
      - touch solr/server/solr/dla-indexing/core.properties solr/server/solr/dla-indexing/stopwords.txt solr/server/solr/dla-indexing/synonyms.txt
      - touch solr/server/solr/dla-prod/core.properties solr/server/solr/dla-prod/stopwords.txt solr/server/solr/dla-prod/synonyms.txt
      - solr/bin/solr start --user-managed
      - solr/docker/scripts/wait-for-solr.sh
      - |
        # JSON-Lines an Solr core dla-indexing senden
        curl --upload-file 'example/output/{ak,au,be,bf,bi,hs,ks,mm,pe,se,sy,th}.jsonl' 'http://localhost:8983/solr/dla-indexing/update/json/docs?commit=true&overwrite=true' -X POST -H 'Content-Type: application/json'
      - |
        # Prüfen, ob Datensätze nicht indexiert werden konnten
        diff <(perl -lne 'print substr($_,9,10)' example/output/*.jsonl | sort) <(curl --silent 'http://localhost:8983/solr/dla-indexing/query?fl=id&q=*%3A*&rows=10000000&wt=csv&csv.header=false' | sort) || true
      - |
        # Neu befüllten Index live schalten durch Swap
        curl --silent 'http://localhost:8983/solr/admin/cores?action=SWAP&core=dla-indexing&other=dla-prod'
      - |
        # Test query auf Solr core dla-prod
        curl --silent 'http://localhost:8983/solr/dla-prod/query?q=*:*&rows=0'

  yaml:
    desc: JSONL zusätzlich in YAML konvertieren
    cmds:
      - |
        # Zeitstempel zu Beginn
        mkdir -p .task/timer; date -u +%s.%N > ".task/timer/{{.TASK}}"
      - |
        # TSV konvertieren in YAML ohne null values
        for f in "{{.DIR}}"/output/*.jsonl; do
            f="${f##*/}"
            f="${f%%.*}"
            yq -p json -o yaml "{{.DIR}}"/output/${f}.jsonl \
            > "{{.DIR}}"/output/${f}.yaml
        done
      - |
        # Laufzeit berechnen
        >&2 echo "{{.TASK}} run time: $(awk -v now=$(date -u +%s.%N) -v timer=$(cat .task/timer/{{.TASK}}) 'BEGIN {print now-timer}') seconds"
    sources:
      - '{{.DIR}}/output/*.tsv'
      - Taskfile.yml
    generates:
      - '{{.DIR}}/output/*.yaml'
    preconditions:
      - command -v yq
      - test -d {{.DIR}}/output

  validate:
    desc: Validierung der XML-Dateien
    cmds:
      - |
        # Zeitstempel zu Beginn
        mkdir -p .task/timer; date -u +%s.%N > ".task/timer/{{.TASK}}"
      - python3 scripts/validate_dc_csv.py "{{.DIR}}"/output/oai-dc.csv
      - python3 scripts/validate_mods_csv.py "{{.DIR}}"/output/oai-mods.csv
      - |
        # Laufzeit berechnen
        >&2 echo "{{.TASK}} run time: $(awk -v now=$(date -u +%s.%N) -v timer=$(cat .task/timer/{{.TASK}}) 'BEGIN {print now-timer}') seconds"
    preconditions:
      - command -v python3
      - test -d {{.DIR}}/output

  install:
    desc: install all requirements into subdirectories
    cmds:
      - task: install_openrefine
      - task: install_orcli
      - task: install_solr

  install_openrefine:
    cmds:
      - mkdir -p openrefine
      - wget --no-verbose -O openrefine.tar.gz https://github.com/OpenRefine/OpenRefine/releases/download/3.8.7/openrefine-linux-3.8.7.tar.gz
      - tar -xzf openrefine.tar.gz -C openrefine --strip 1 && rm openrefine.tar.gz
       
  install_orcli:
    cmds:
      - mkdir -p openrefine
      - wget --no-verbose -O openrefine/orcli https://github.com/opencultureconsulting/orcli/releases/download/v0.4.1/orcli
      - chmod +x openrefine/orcli

  install_solr:
    cmds:
      - mkdir -p solr
      - wget -q --show-progress -O solr.tgz https://www.apache.org/dyn/closer.lua/solr/solr/9.8.1/solr-9.8.1-slim.tgz?action=download
      - tar -xzf solr.tgz -C solr --strip 1 && rm solr.tgz
